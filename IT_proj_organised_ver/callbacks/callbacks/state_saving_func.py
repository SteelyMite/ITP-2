import base64
import io
import pandas as pd
import plotly.express as px
from dash import dcc, html, dash_table
from dash.dependencies import Input, Output, State, ALL
import dash_bootstrap_components as dbc
import inspect

user_actions = []
script_list = []

def get_function_source_code(function):
    source_code = inspect.getsource(function)
    return source_code

def add_callback_source_code(callback_func):
    source_code = inspect.getsource(callback_func)
    script_list.append(source_code)

def log_user_action(action, filename=None):
    if filename:
        user_actions.append(f"{action} ({filename})")
    else:
        user_actions.append(action)

def save_user_actions_to_py_file(filename):
    with open(filename, "w") as file:
        file.write("# User Actions\n")
        file.write("user_actions = [\n")
        for action in user_actions:
            file.write(f'    "{action}",\n')
        file.write("]\n")

def write_callback_functions_to_file(filename):
    # List of imports
    imports = [
        "import base64",
        "import io",
        "import pandas as pd",
        "import plotly.express as px",
        "from dash import dcc, html, dash_table",
        "from dash.dependencies import Input, Output, State, ALL",
        "import dash_bootstrap_components as dbc",
        "import inspect",
        "import dash",
        "import json",
        "import plotly.subplots as sp",
        "import plotly.figure_factory as ff",
        "from sklearn.cluster import KMeans",
        "from sklearn import svm",
        "from sklearn.preprocessing import label_binarize",
        "from sklearn.metrics import confusion_matrix, classification_report, roc_curve, auc",
        "from sklearn.model_selection import train_test_split",
        "from dash import dcc",
        "from dash import html",
        "from app_instance import app",
        "from layout import layout",
        "from callbacks import state_saving_callbacks, data_management_callbacks, statistical_summary_callbacks",
        "from utils import parse_contents",
        "from sklearn.ensemble import RandomForestClassifier",
        "from sklearn.metrics import accuracy_score, silhouette_score",
        "import plotly.graph_objs as go",
        "from sklearn.preprocessing import OneHotEncoder",
        "from sklearn.compose import ColumnTransformer",
        "from sklearn.preprocessing import StandardScaler",
        "from matplotlib import pyplot as plt",
        "import numpy as np",
        "import seaborn as sns",
        "import inspect",
        "app.layout = layout",
        "if __name__ == '__main__':",
        "    app.run_server(debug=True)"
        "app = dash.Dash(__name__, suppress_callback_exceptions=True, external_stylesheets=[dbc.themes.YETI])",
        "server = app.server",
        "navbar = dbc.NavbarSimple(",
        "    brand='PyExploratory',",
        "    brand_href='/',",
        "    sticky='top',",
        ")",
        "layout = html.Div([",
        "    navbar,",
        "    dcc.Store(id='stored-data'),  # store the uploaded data",
        "    dbc.Container([",
        "        dbc.Tabs([",
        "            # Tab 1: Import, Export, DataFrame Display",
        "            dbc.Tab(label='Data Management', children=[",
        "                dbc.Row([",
        "                    # Import File Type Dropdown",
        "                    dbc.Col([",
        "                        dcc.Dropdown(",
        "                            id='file-type-dropdown',",
        "                            options=[",
        "                                {'label': 'CSV', 'value': 'csv'},",
        "                                {'label': 'Excel', 'value': 'excel'},",
        "                                {'label': 'JSON', 'value': 'json'}",
        "                            ],",
        "                            placeholder='Select file type...',",
        "                            value='csv',",
        "                            className='custom-dropdown'",
        "                        ),",
        "                    ], width=3),",
        "                    # Upload Data Section",
        "                    dbc.Col([",
        "                        dcc.Upload(",
        "                            id='upload-data',",
        "                            children=html.Div([",
        "                                'Drag and Drop or ',",
        "                                html.A('Select Files')",
        "                            ]),",
        "                            style={",
        "                                'width': '100%',",
        "                                'height': '40px',",
        "                                'lineHeight': '40px',",
        "                                'borderWidth': '1px',",
        "                                'borderStyle': 'dashed',",
        "                                'borderRadius': '5px',",
        "                                'textAlign': 'center',",
        "                                'margin': '10px'",
        "                            },",
        "                            multiple=False",
        "                        ),",
        "                        html.Div(id='error-message', style={'color': 'red'}),",
        "                    ], width=3),",
        "                    # Export File Type Dropdown",
        "                    dbc.Col([",
        "                        dcc.Dropdown(",
        "                            id='export-format-dropdown',",
        "                            options=[",
        "                                {'label': 'CSV', 'value': 'csv'},",
        "                                {'label': 'Excel', 'value': 'xlsx'},",
        "                                {'label': 'JSON', 'value': 'json'}",
        "                            ],",
        "                            value='csv',",
        "                            clearable=False,",
        "                            className='custom-dropdown'",
        "                        ),",
        "                    ], width=3),",
        "                    # Save Button and Download Component",
        "                    dbc.Col([",
        "                        html.Button('Save', id='save-button', className='custom-button'),",
        "                        dcc.Download(id='download')",
        "                    ], width=3)",
        "                ]),",
        "                # DataTable to Display Uploaded Data",
        "                html.Div([",
        "                    dash_table.DataTable(id='datatable-upload-container')",
        "                ], style={'display': 'none'}),",
        "                html.Div(id='output-data-upload'),",
        "            ]),",
        "            # Tab 2: Statistical Summary",
        "            dbc.Tab(label='Statistical Summary', children=[",
        "                html.Div(id='summary-output'),",
        "            ]),",
        "            # Tab 3: Visualisation Summary",
        "            dbc.Tab(label='Visualisation', children=[",
        "                # column selection",
        "                dbc.Row([",
        "                    # x axis column",
        "                    dbc.Col([",
        "                        html.Label('Select X-axis column:'),",
        "                        dcc.Dropdown(",
        "                            id='xaxis-viscolumn-dropdown',",
        "                            options=[],",
        "                            placeholder='Select a column for X-axis...',",
        "                            value=None,",
        "                            className='custom-dropdown'",
        "                        )",
        "                    ], width=4),",
        "                    # y axis column",
        "                    dbc.Col([",
        "                        html.Label('Select Y-axis column:'),",
        "                        dcc.Dropdown(",
        "                            id='yaxis-viscolumn-dropdown',",
        "                            options=[],",
        "                            placeholder='Select a column for Y-axis...',",
        "                            value=None,",
        "                            className='custom-dropdown'",
        "                        ),",
        "                    ], width=4),",
        "                    # graph type",
        "                    dbc.Col([",
        "                        html.Label('Select visualization type:'),",
        "                        dcc.Dropdown(",
        "                            id='visualization-type-dropdown',",
        "                            options=[",
        "                                {'label': 'Scatter Plot', 'value': 'scatter'},",
        "                                {'label': 'Line Plot', 'value': 'line'},",
        "                                {'label': 'Bar Chart', 'value': 'bar'},",
        "                                {'label': 'Pie Chart', 'value': 'pie'},",
        "                                {'label': 'Histogram', 'value': 'histogram'},",
        "                                {'label': 'Box Plot', 'value': 'box'},",
        "                                {'label': 'Area Plot', 'value': 'area'},",
        "                                {'label': 'Violin Plot', 'value': 'violin'}",
        "                            ],",
        "                            placeholder='Select a type...',",
        "                            value=None,",
        "                            className='custom-dropdown'",
        "                        ),",
        "                    ], width=4)",
        "                ], className='mb-4'),",
        "                # Visualization",
        "                dbc.Row([",
        "                    dbc.Col([",
        "                        dcc.Graph(id='visualisation-graph')  # display the selected visualization",
        "                    ])",
        "                ], className='mb-4'),",
        "                # Save Graph Button",
        "                dbc.Row([",
        "                    dbc.Col([",
        "                    ], width=3)",
        "                ], className='mb-4'),",
        "                html.Button('Save Graph', id='save-graph-button', className='custom-button'),",
        "                html.Div(id='saved-visgraphs-container')",
        "            ]),",
        "            # Tab 4: Analytics Summary",
        "            dbc.Tab(label='Analytics', children=[",
        "                # Data Analysis Choice",
        "                dbc.Row([",
        "                    dbc.Col([",
        "                        html.Label('Choose Data Analysis Method:'),",
        "                        dcc.Dropdown(",
        "                            id='data-analysis-dropdown',",
        "                            options=[",
        "                                {'label': 'Clustering', 'value': 'clustering'},",
        "                                {'label': 'Classification', 'value': 'classification'}",
        "                            ],",
        "                            placeholder='Select an analysis method...',",
        "                            value=None,",
        "                            className='custom-dropdown'",
        "                        )",
        "                    ], width=4),",
        "                ], className='mb-4'),",
        "                dbc.Row([",
        "                    dbc.Col([",
        "                        dcc.Store(id='input-dict-store', data=[]),",
        "                        html.Button('Start', id='start-button', className='custom-button'),",
        "                        html.Div(id='dynamic-input-div'),",
        "                        html.Button('Perform', id='perform-button', className='custom-button'),",
        "                        html.Div(id='perform-result-div', style={'color': 'green', 'margin-top': '10px'}),",
        "                    ], width=10)",
        "                ], className='mb-4'),",
        "            ]),",
        "            dbc.Tab(label='State Summary', children=[",
        "                html.Ul(id='action-list'),",
        "                html.Button('Export Commands to .py File', id='export-commands-button', className='mt-3 mb-4', style={",
        "                    'alignItems': 'center',",
        "                    'justifyContent': 'center',",
        "                    'width': '100%',",
        "                    'height': '40px',",
        "                    'borderWidth': '1px',",
        "                    'borderRadius': '5px',",
        "                    'margin': '10px'",
        "                }),",
        "                dcc.Interval(",
        "                    id='update-interval',",
        "                    interval=10 * 1000,  # Update every 10 seconds (adjust as needed)",
        "                    n_intervals=0",
        "                )",
        "            ]),",
        "        ]),",
        "    ]),",
        "])",
        "",
        "def parse_contents(contents, file_type):",
        "    content_type, content_string = contents.split(',')",
        "    decoded = base64.b64decode(content_string)",
        "    try:",
        "        if file_type == 'csv':",
        "            df = pd.read_csv(io.StringIO(decoded.decode('utf-8')))",
        "        elif file_type == 'excel':",
        "            df = pd.read_excel(io.BytesIO(decoded))",
        "        elif file_type == 'json':",
        "            df = pd.read_json(io.BytesIO(decoded))",
        "        else:",
        "            return None",
        "    except Exception as e:",
        "        print(e)",
        "        return None",
        "    return df",
        "",
        "def generate_column_summary_box(df, column_name):",
        "    # Calculate statistics",
        "    nan_count = df[column_name].isna().sum()",
        "    if pd.api.types.is_numeric_dtype(df[column_name]):",
        "        # Generate histogram for numeric columns",
        "        data_type = 'Numeric'",
        "        fig = px.histogram(df, x=column_name, nbins=5)  # Here, 5 bins are used for simplicity; adjust as needed.",
        "        min_val = df[column_name].min()",
        "        max_val = df[column_name].max()",
        "        mean_val = df[column_name].mean()",
        "        data_cleaning_options = [",
        "            {'label': 'Replace NaN with Min', 'value': 'min'},",
        "            {'label': 'Replace NaN with Max', 'value': 'max'},",
        "            {'label': 'Replace NaN with Mean', 'value': 'mean'},",
        "            {'label': 'Replace NaN with Zero', 'value': 'zero'}",
        "        ]",
        "        normalization_options = [",
        "            {'label': 'Normalize (New Column)', 'value': 'normalize_new'},",
        "            {'label': 'Normalize (Replace)', 'value': 'normalize_replace'},",
        "        ]",
        "        dropdown_menu = dbc.DropdownMenu(",
        "            label='Options',",
        "            children=[",
        "                dbc.DropdownMenuItem('Change data type', header=True),",
        "                dbc.DropdownMenuItem('Numeric', id={'type': 'convert', 'index': column_name, 'to': 'Numeric'}),",
        "                dbc.DropdownMenuItem('String', id={'type': 'convert', 'index': column_name, 'to': 'String'}),",
        "                dbc.DropdownMenuItem(divider=True),",
        "                dbc.DropdownMenuItem('Data Cleaning', header=True),",
        "                *[dbc.DropdownMenuItem(item['label'], id={'type': 'clean', 'index': column_name, 'action': item['value']}) for item in data_cleaning_options],",
        "                dbc.DropdownMenuItem(divider=True),",
        "                dbc.DropdownMenuItem('Normalization', header=True),",
        "                *[dbc.DropdownMenuItem(item['label'], id={'type': 'clean', 'index': column_name, 'action': item['value']}) for item in normalization_options],",
        "            ],",
        "            className='m-1',",
        "            right=True",
        "        )",
        "        return dbc.Card([",
        "            dbc.CardHeader([",
        "                html.Div([",
        "                    html.Div(column_name),",
        "                    html.Div(f'Data type: {data_type}', style={'fontSize': '12px', 'color': 'grey'})",
        "                ]),",
        "                dropdown_menu",
        "            ], style={'display': 'flex', 'justifyContent': 'space-between'}),",
        "            dbc.CardBody([",
        "                dcc.Graph(figure=fig, style={'height': '250px'}),",
        "                html.P(f'NaN values: {nan_count}'),",
        "                html.P(f'Min: {min_val}'),",
        "                html.P(f'Max: {max_val}'),",
        "                html.P(f'Mean: {mean_val}')",
        "            ])",
        "        ])",
        "    else:",
        "        # For non-numeric columns, show a bar chart of top X most frequent values",
        "        data_type = 'String'",
        "        unique_count = df[column_name].nunique()  # Calculate the number of unique strings",
        "        top_values = df[column_name].value_counts().head(10)",
        "        fig = px.bar(top_values, x=top_values.index, y=top_values.values, labels={'x': column_name, 'y': 'Count'})",
        "        value_counts = df[column_name].value_counts()",
        "        most_frequent_string = value_counts.index[0] if not value_counts.empty else 'N/A'",
        "        least_frequent_string = value_counts.index[-1] if not value_counts.empty else 'N/A'",
        "        data_cleaning_options = [",
        "            {'label': 'Replace NaN with N/A', 'value': 'na_string'},",
        "            {'label': f'Replace NaN with Most Frequent: {most_frequent_string}', 'value': 'most_frequent'},",
        "        ]",
        "        dropdown_menu = dbc.DropdownMenu(",
        "            label='Options',",
        "            children=[",
        "                dbc.DropdownMenuItem('Change data type', header=True),",
        "                dbc.DropdownMenuItem('Numeric', id={'type': 'convert', 'index': column_name, 'to': 'Numeric'}),",
        "                dbc.DropdownMenuItem('String', id={'type': 'convert', 'index': column_name, 'to': 'String'}),",
        "                dbc.DropdownMenuItem(divider=True),",
        "                dbc.DropdownMenuItem('Data Cleaning', header=True),",
        "                *[dbc.DropdownMenuItem(item['label'], id={'type': 'clean', 'index': column_name, 'action': item['value']}) for item in data_cleaning_options],",
        "            ],",
        "            className='m-1',",
        "            right=True",
        "        )",
        "        return dbc.Card([",
        "            dbc.CardHeader([",
        "                html.Div([",
        "                    html.Div(column_name),",
        "                    html.Div(f'Data type: {data_type}', style={'fontSize': '12px', 'color': 'grey'})",
        "                ]),",
        "                dropdown_menu  # Adding dropdown menu here for consistency",
        "            ], style={'display': 'flex', 'justifyContent': 'space-between'}),",
        "            dbc.CardBody([",
        "                dcc.Graph(figure=fig, style={'height': '250px'}),",
        "                html.P(f'NaN values: {nan_count}'),",
        "                html.P(f'Most Frequent: {most_frequent_string}'),",
        "                html.P(f'Least Frequent: {least_frequent_string}'),",
        "                html.P(f'Unique Strings: {unique_count}')  # Display the number of unique strings",
        "            ])",
        "        ])",
        "",
        "user_actions = []",
        "script_list = []",
        "",
        "def get_function_source_code(function):",
        "    source_code = inspect.getsource(function)",
        "    return source_code",
        "",
        "def add_callback_source_code(callback_func):",
        "    source_code = inspect.getsource(callback_func)",
        "    script_list.append(source_code)",
        "",
        "def log_user_action(action, filename=None):",
        "    if filename:",
        "        user_actions.append(f'{action} ({filename})')",
        "    else:",
        "        user_actions.append(action)",
        "def clustering_KMeans(inputData, selectedColumns, numClusters):",
        "    if inputData.empty:",
        "        return []",
        "",
        "    fig = []",
        "    try:",
        "        kmeans = KMeans(n_clusters=numClusters)",
        "        selectedData = inputData[selectedColumns]",
        "        cluster_assignments = kmeans.fit_predict(selectedData)",
        "        #? Create data analysis HTML report",
        "        cluster_centers = kmeans.cluster_centers_",
        "        inertia = kmeans.inertia_",
        "",
        "        statistics = html.Div([",
        "            html.H4('Cluster Statistics:'),",
        "            html.P(f'Number of Clusters (K): {numClusters}'),",
        "            html.P(f'Cluster Centers:\\n{cluster_centers}'),",
        "            html.P(f'Inertia (Within-cluster Sum of Squares): {inertia}'),",
        "        ])",
        "        #? Generate Plot if 2D, Else return Scatter Matrix and Cluster Profile",
        "        if(len(selectedColumns)==2):",
        "            scatter_plot = px.scatter(selectedData, x=selectedColumns[0], y=selectedColumns[1], color=cluster_assignments, title='K-means Clustering')",
        "            scatter_plot.update_layout(title='K-means Clustering - Scatter Plot')",
        "            fig.append(scatter_plot)",
        "        else:",
        "            pair_plot = px.scatter_matrix(selectedData, dimensions=selectedColumns, color=cluster_assignments)",
        "            pair_plot.update_layout(title='K-means Clustering - Pair Plots')",
        "            cluster_profile = pd.DataFrame(cluster_centers, columns=selectedData.columns)",
        "            bar_plot = px.bar(cluster_profile)",
        "            bar_plot.update_layout(title='K-means Clustering - Cluster Profile')",
        "            fig.append(bar_plot)",
        "            fig.append(pair_plot)",
        "        return fig, statistics",
        "    except ValueError as e:",
        "        if 'Input X contains NaN' in str(e):",
        "            print('Data contains NaN values. Please clean the data before analyzing.')",
        "        else:",
        "            print(f'An error occurred: {str(e)}')",
        "    # You can return an informative message instead of a figure,",
        "    # so you could render this message in a dedicated Div in your Dash app.",
        "    except_msg = 'An error occurred during clustering. Please ensure data is clean and try again.'",
        "    return except_msg",
        "",
        "",
        "def classification_SVM(inputData, selectedColumns, targetColumn, kernel):",
        "    fig = []",
        "    print('1')",
        "    selectedData = inputData[selectedColumns]",
        "    # Split the data into training and testing sets",
        "    X_train, X_test, y_train, y_test = train_test_split(selectedData, inputData[targetColumn], test_size=0.2, random_state=42)",
        "    # Create and train SVM Classifier ",
        "    y_train = y_train.values.ravel()",
        "    print('1.5')",
        "    y_test = y_test.values.ravel()",
        "    print('2')",
        "    classifier = svm.SVC(kernel=kernel) #!Make sure to update kernel type",
        "    print('3')",
        "    classifier.fit(X_train, y_train)",
        "    print('4')",
        "    # Predict labels on the test data",
        "    y_pred = classifier.predict(X_test)",
        "    print('5')",
        "    # Calculate confusion matrix and classification report",
        "    cm = confusion_matrix(y_test, y_pred)",
        "    print('6')",
        "    # fig.append(cm)",
        "    class_report = classification_report(y_test, y_pred, output_dict=True)",
        "    print('7')",
        "    # Create data analysis HTML report ",
        "    statistics = html.Div([",
        "        html.H4('Classification Statistics:'),",
        "        html.P(f'Precision: {class_report['weighted avg']['precision']}'),",
        "        html.P(f'Recall: {class_report['weighted avg']['recall']}'),",
        "        html.P(f'F1-Score: {class_report['weighted avg']['f1-score']}'),",
        "        html.P(f'Support: {class_report['weighted avg']['support']}')",
        "      ])",
        "        # Create the confusion matrix plot",
        "    print('8')",
        "    figure = generateConfusionMatrix(cm, class_labels=classifier.classes_)",
        "    print('9')",
        "    figure.update_layout(title='SVM Classification - Confusion Matrix')",
        "    print('10')",
        "    fig.append(figure)",
        "    print('11')",
        "    print(len(classifier.classes_)",
        "    #return fig, statistics",
        "    if len(classifier.classes_) == 2:",
        "        y_pred_bin = label_binarize(y_pred, classes=classifier.classes_)",
        "        y_test_bin = label_binarize(y_test, classes=classifier.classes_)",
        "        AUC_Plot =  generateAUC(y_test_bin, y_pred_bin)",
        "        AUC_Plot.update_layout(title='SVM Classification - Area Under Curve Plot')",
        "        print('11.5')",
        "        fig.append(AUC_Plot)",
        "    print('12')",
        "    return fig, statistics",
        "",
        "",
        "def generateAUC(y_test, y_pred):",
        "    # Calculate ROC curve and AUC",
        "    fpr, tpr, thresholds = roc_curve(y_test, y_pred)",
        "    roc_auc = auc(fpr, tpr)",
        "",
        "    # Create ROC curve plot using Plotly Express",
        "    fig = px.line(x=fpr, y=tpr, title=f'ROC curve (AUC = {roc_auc:.2f})', labels={'x': 'False Positive Rate', 'y': 'True Positive Rate'})",
        "    fig.add_shape(type='line', line=dict(dash='dash'), x0=0, x1=1, y0=0, y1=1)",
        "    return fig",
        "",
        "",
        "def generateConfusionMatrix(cm, class_labels):",
        "    # Create a trace for the heatmap",
        "    heatmap = go.Heatmap(",
        "        z=cm,",
        "        x=class_labels,",
        "        y=class_labels,",
        "        colorscale='Blues',",
        "        colorbar=dict(title='Count'),",
        "    )",
        "    # Define the layout for the confusion matrix plot",
        "    layout = go.Layout(",
        "        title='Confusion Matrix',",
        "        xaxis=dict(title='Predicted labels'),",
        "        yaxis=dict(title='True labels'),",
        "    )",
        "    return go.Figure(data=[heatmap], layout=layout)",
        "CLUSTERING_INPUT_MAPPING = {",
        "    'selected_columns': 1,  # Index of the dcc.Dropdown component in 'dynamic-input-div'",
        "    'num_clusters': 3       # Index of the dcc.Input component in 'dynamic-input-div'",
        "}",
        "",
        "CLASSIFICATION_INPUT_MAPPING = {",
        "    'features_columns': 1,  # Index of the dcc.Dropdown for selecting feature columns",
        "    'target_column': 3,     # Index of the dcc.Dropdown for selecting the target column",
        "    'kernel_type': 5        # Index of the dcc.Dropdown for selecting kernel type",
        "}"

    ]

    # Create a Python file with the specified filename
    with open(filename, 'w' ,encoding='utf-8') as file:
        file.write("\n".join(imports))

        for callback_source_code in script_list:
            file.write(callback_source_code)
            file.write("\n")

        file.write("if __name__ == '__main__':\n")
        file.write("    app.run_server(debug=True)\n")


